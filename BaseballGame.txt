Baseball Game Problem from https://leetcode.com/problems/baseball-game/

/*
You're now a baseball game point recorder.

Given a list of strings, each string can be one of the 4 following types:

Integer (one round's score): Directly represents the number of points you get in this round.
"+" (one round's score): Represents that the points you get in this round are the sum of the last two valid round's points.
"D" (one round's score): Represents that the points you get in this round are the doubled data of the last valid round's points.
"C" (an operation, which isn't a round's score): Represents the last valid round's points you get were invalid and should be removed.
Each round's operation is permanent and could have an impact on the round before and the round after.

You need to return the sum of the points you could get in all the rounds.

Example:
Input: ["5","-2","4","C","D","9","+","+"]
Output: 27
Explanation: 
Round 1: You could get 5 points. The sum is: 5.
Round 2: You could get -2 points. The sum is: 3.
Round 3: You could get 4 points. The sum is: 7.
Operation 1: The round 3's data is invalid. The sum is: 3.  
Round 4: You could get -4 points (the round 3's data has been removed). The sum is: -1.
Round 5: You could get 9 points. The sum is: 8.
Round 6: You could get -4 + 9 = 5 points. The sum is 13.
Round 7: You could get 9 + 5 = 14 points. The sum is 27.
*/

class Solution 
{
  public:
      int calPoints(vector<string>& ops) 
      {
        // Stack to store scores
        stack<int> stack;
        // Sum of points
        int iC = 0;
        
        // Iterate through every element in vector
        for (int i = 0; i < ops.size(); i++)
        {
          string s = ops[i];

          // If the element is numerical - a score
          if (s != "C" && s != "D" && s != "+")
          {
            // Convert from string to number
            int iN = stoi(s);
            // Add score to counter
            iC += iN;
            // Add score to the stack
            stack.push(iN);
          }
          // If the element is a C, D or +
          else if (s == "C" || s == "D" || s == "+")
          {
            // Last valid round's points you get were invalid and should be removed
            if (s == "C")
            {
              // Substract the last score added to the stack
              iC -= stack.top();
              // Remove last element from the stack
              stack.pop();
            }
            // Points you get in this round are the doubled data of the last valid round's points
            else if (s == "D")
            {
              // New score = last element in the stack times 2
              int iN = stack.top() * 2;
              // Add new score to counter
              iC += iN;
              // Add new score to the stack
              stack.push(iN);
            }
            // Points you get in this round are the sum of the last two valid round's points
            else if (s == "+")
            {
              // Find out the last valid round and store in temporary variable
              int iT1 = stack.top();
              // Remove last valid round to access the one before it
              stack.pop();
              // Find out the new last valid round and store in temporary variable
              int iT2 = stack.top();
              // Put original last valid round back in stack
              stack.push(iT1);
              // Add two temporary variables - they are a new score
              int iN = iT1 + iT2;
              // Add the two temporary variables to the counter
              iC += iN;
              // Add score to the stack
              stack.push(iN);
            }
          }
        }
        // Return sum
        return iC;
      }
};